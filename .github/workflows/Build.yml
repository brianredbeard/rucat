name: Build and Release

on:
  push:
    branches: ["main"]
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: ["main"]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run linter and tests
        run: |
          cargo check --all-features
          cargo test --all-features

  build:
    name: Build binaries
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation dependencies (for Linux aarch64)
        if: matrix.cross == true
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          # Linker for aarch64-unknown-linux-gnu on x86_64 runner
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Prepare package (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir staging
          cp target/${{ matrix.target }}/release/rucat staging/
          cp README.md staging/
          cp LICENSE staging/
          tar czf rucat-${{ matrix.target }}.tar.gz -C staging .
          echo "ASSET=rucat-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV

      - name: Prepare package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir staging
          copy target\${{ matrix.target }}\release\rucat.exe staging\
          copy README.md staging\
          copy LICENSE staging\
          Compress-Archive -Path staging\* -DestinationPath rucat-${{ matrix.target }}.zip
          echo "ASSET=rucat-${{ matrix.target }}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET }}
          path: ${{ env.ASSET }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write # needed to create releases and upload assets

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          # The softprops action will automatically find files matching the glob
          # in the workspace. download-artifact creates a directory for each
          # artifact, so we glob inside those directories.
          files: artifacts/*/*
